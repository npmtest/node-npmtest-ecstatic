{"/home/travis/build/npmtest/node-npmtest-ecstatic/test.js":"/* istanbul instrument in package npmtest_ecstatic */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ecstatic/lib.npmtest_ecstatic.js":"/* istanbul instrument in package npmtest_ecstatic */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ecstatic = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ecstatic = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ecstatic/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ecstatic && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ecstatic */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ecstatic\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ecstatic.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ecstatic.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ecstatic.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ecstatic.__dirname + '/lib.npmtest_ecstatic.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ecstatic/node_modules/ecstatic/lib/ecstatic.js":"#! /usr/bin/env node\n\nvar path = require('path'),\n    fs = require('fs'),\n    url = require('url'),\n    mime = require('mime'),\n    urlJoin = require('url-join'),\n    showDir = require('./ecstatic/show-dir'),\n    version = JSON.parse(\n      fs.readFileSync(__dirname + '/../package.json').toString()\n    ).version,\n    status = require('./ecstatic/status-handlers'),\n    generateEtag = require('./ecstatic/etag'),\n    optsParser = require('./ecstatic/opts');\n\nvar ecstatic = module.exports = function (dir, options) {\n  if (typeof dir !== 'string') {\n    options = dir;\n    dir = options.root;\n  }\n\n  var root = path.join(path.resolve(dir), '/'),\n      opts = optsParser(options),\n      cache = opts.cache,\n      autoIndex = opts.autoIndex,\n      baseDir = opts.baseDir,\n      defaultExt = opts.defaultExt,\n      handleError = opts.handleError,\n      headers = opts.headers,\n      serverHeader = opts.serverHeader,\n      weakEtags = opts.weakEtags,\n      handleOptionsMethod = opts.handleOptionsMethod;\n\n  opts.root = dir;\n  if (defaultExt && /^\\./.test(defaultExt)) defaultExt = defaultExt.replace(/^\\./, '');\n\n  // Support hashes and .types files in mimeTypes @since 0.8\n  if (opts.mimeTypes) {\n    try {\n      // You can pass a JSON blob here---useful for CLI use\n      opts.mimeTypes = JSON.parse(opts.mimeTypes);\n    } catch (e) {}\n    if (typeof opts.mimeTypes === 'string') {\n      mime.load(opts.mimeTypes);\n    }\n    else if (typeof opts.mimeTypes === 'object') {\n      mime.define(opts.mimeTypes);\n    }\n  }\n\n\n  return function middleware (req, res, next) {\n\n    // Strip any null bytes from the url\n    // This was at one point necessary because of an old bug in url.parse\n    //\n    // See: https://github.com/jfhbrook/node-ecstatic/issues/16#issuecomment-3039914\n    // See: https://github.com/jfhbrook/node-ecstatic/commit/43f7e72a31524f88f47e367c3cc3af710e67c9f4\n    //\n    // But this opens up a regex dos attack vector! D:\n    //\n    // Based on some research (ie asking #node-dev if this is still an issue),\n    // it's *probably* not an issue. :)\n    /*\n    while(req.url.indexOf('%00') !== -1) {\n      req.url = req.url.replace(/\\%00/g, '');\n    }\n    */\n\n    // Figure out the path for the file from the given url\n    var parsed = url.parse(req.url);\n    try {\n      decodeURIComponent(req.url); // check validity of url\n      var pathname = decodePathname(parsed.pathname);\n    }\n    catch (err) {\n      return status[400](res, next, { error: err });\n    }\n\n    var file = path.normalize(\n          path.join(root,\n            path.relative(\n              path.join('/', baseDir),\n              pathname\n            )\n          )\n        ),\n        gzipped = file + '.gz';\n\n    if(serverHeader !== false) {\n      // Set common headers.\n      res.setHeader('server', 'ecstatic-'+version);\n    }\n    Object.keys(headers).forEach(function (key) {\n      res.setHeader(key, headers[key])\n    })\n\n    if (req.method === 'OPTIONS' && handleOptionsMethod) {\n      return res.end();\n    }\n\n    // TODO: This check is broken, which causes the 403 on the\n    // expected 404.\n    if (file.slice(0, root.length) !== root) {\n      return status[403](res, next);\n    }\n\n    if (req.method && (req.method !== 'GET' && req.method !== 'HEAD' )) {\n      return status[405](res, next);\n    }\n\n    function statFile() {\n      fs.stat(file, function (err, stat) {\n        if (err && (err.code === 'ENOENT' || err.code === 'ENOTDIR')) {\n          if (req.statusCode == 404) {\n            // This means we're already trying ./404.html and can not find it.\n            // So send plain text response with 404 status code\n            status[404](res, next);\n          }\n          else if (!path.extname(parsed.pathname).length && defaultExt) {\n            // If there is no file extension in the path and we have a default\n            // extension try filename and default extension combination before rendering 404.html.\n            middleware({\n              url: parsed.pathname + '.' + defaultExt + ((parsed.search)? parsed.search:'')\n            }, res, next);\n          }\n          else {\n            // Try to serve default ./404.html\n            middleware({\n              url: (handleError ? ('/' + path.join(baseDir, '404.' + defaultExt)) : req.url),\n              statusCode: 404\n            }, res, next);\n          }\n        }\n        else if (err) {\n          status[500](res, next, { error: err });\n        }\n        else if (stat.isDirectory()) {\n          if (!autoIndex && !opts.showDir) {\n            status[404](res, next);\n            return;\n          }\n\n          // 302 to / if necessary\n          if (!parsed.pathname.match(/\\/$/)) {\n            res.statusCode = 302;\n            res.setHeader('location', parsed.pathname + '/' +\n              (parsed.query? ('?' + parsed.query):'')\n            );\n            return res.end();\n          }\n\n          if (autoIndex) {\n            return middleware({\n              url: urlJoin(encodeURIComponent(pathname), '/index.' + defaultExt)\n            }, res, function (err) {\n              if (err) {\n                return status[500](res, next, { error: err });\n              }\n              if (opts.showDir) {\n                return showDir(opts, stat)(req, res);\n              }\n\n              return status[403](res, next);\n            });\n          }\n\n          if (opts.showDir) {\n            return showDir(opts, stat)(req, res);\n          }\n\n        }\n        else {\n          serve(stat);\n        }\n      });\n    }\n\n    // Look for a gzipped file if this is turned on\n    if (opts.gzip && shouldCompress(req)) {\n      fs.stat(gzipped, function (err, stat) {\n        if (!err && stat.isFile()) {\n          file = gzipped;\n          return serve(stat);\n        } else {\n          statFile();\n        }\n      });\n    } else {\n      statFile();\n    }\n\n    function serve(stat) {\n      // Do a MIME lookup, fall back to octet-stream and handle gzip\n      // special case.\n      var defaultType = opts.contentType || 'application/octet-stream',\n          contentType = mime.lookup(file, defaultType),\n          charSet;\n\n      if (contentType) {\n        charSet = mime.charsets.lookup(contentType, 'utf-8');\n        if (charSet) {\n          contentType += '; charset=' + charSet;\n        }\n      }\n\n      if (path.extname(file) === '.gz') {\n        res.setHeader('Content-Encoding', 'gzip');\n\n        // strip gz ending and lookup mime type\n        contentType = mime.lookup(path.basename(file, \".gz\"), defaultType);\n      }\n\n      var range = (req.headers && req.headers['range']);\n      if (range) {\n        var total = stat.size;\n        var parts = range.replace(/bytes=/, \"\").split(\"-\");\n        var partialstart = parts[0];\n        var partialend = parts[1];\n        var start = parseInt(partialstart, 10);\n        var end = Math.min(total-1, partialend ? parseInt(partialend, 10) : total-1);\n        var chunksize = (end-start)+1;\n        if (start > end || isNaN(start) || isNaN(end)) {\n          return status['416'](res, next);\n        }\n        var fstream = fs.createReadStream(file, {start: start, end: end});\n        fstream.on('error', function (err) {\n          status['500'](res, next, { error: err });\n        });\n        res.on('close', function () {\n           fstream.destroy();\n        });\n        res.writeHead(206, {\n          'Content-Range': 'bytes ' + start + '-' + end + '/' + total,\n          'Accept-Ranges': 'bytes',\n          'Content-Length': chunksize,\n          'Content-Type': contentType\n        });\n        fstream.pipe(res);\n        return;\n      }\n\n      // TODO: Helper for this, with default headers.\n      var lastModified = (new Date(stat.mtime)).toUTCString(),\n          etag = generateEtag(stat, weakEtags);\n      res.setHeader('last-modified', lastModified);\n      res.setHeader('etag', etag);\n\n      if (typeof cache === 'function') {\n        var requestSpecificCache = cache(pathname);\n        if (typeof requestSpecificCache === 'number') {\n          requestSpecificCache = 'max-age=' + requestSpecificCache;\n        }\n        res.setHeader('cache-control', requestSpecificCache);\n      } else {\n        res.setHeader('cache-control', cache);\n      }\n\n      // Return a 304 if necessary\n      if (shouldReturn304(req, lastModified, etag)) {\n        return status[304](res, next);\n      }\n\n      res.setHeader('content-length', stat.size);\n      res.setHeader('content-type', contentType);\n\n      // set the response statusCode if we have a request statusCode.\n      // This only can happen if we have a 404 with some kind of 404.html\n      // In all other cases where we have a file we serve the 200\n      res.statusCode = req.statusCode || 200;\n\n      if (req.method === \"HEAD\") {\n        return res.end();\n      }\n\n      var stream = fs.createReadStream(file);\n\n      stream.pipe(res);\n      stream.on('error', function (err) {\n        status['500'](res, next, { error: err });\n      });\n    }\n\n    function shouldReturn304(req, serverLastModified, serverEtag) {\n      if (!req || !req.headers) {\n        return false;\n      }\n\n      var clientModifiedSince = req.headers['if-modified-since'],\n          clientEtag = req.headers['if-none-match'];\n\n      if (!clientModifiedSince && !clientEtag) {\n        // Client did not provide any conditional caching headers\n        return false;\n      }\n\n      if (clientModifiedSince) {\n        // Catch \"illegal access\" dates that will crash v8\n        // https://github.com/jfhbrook/node-ecstatic/pull/179\n        try {\n          var clientModifiedDate = new Date(Date.parse(clientModifiedSince));\n        }\n        catch (err) { return false }\n\n        if (clientModifiedDate.toString() === 'Invalid Date') {\n          return false;\n        }\n        // If the client's copy is older than the server's, don't return 304\n        if (clientModifiedDate < new Date(serverLastModified)) {\n          return false;\n        }\n      }\n\n      if (clientEtag) {\n        // Do a strong or weak etag comparison based on setting\n        // https://www.ietf.org/rfc/rfc2616.txt Section 13.3.3\n        if (opts.weakCompare && clientEtag !== serverEtag\n          && clientEtag !== ('W/' + serverEtag) && ('W/' + clientEtag) !== serverEtag) {\n          return false;\n        } else if (!opts.weakCompare && (clientEtag !== serverEtag || clientEtag.indexOf('W/') === 0)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  };\n};\n\necstatic.version = version;\necstatic.showDir = showDir;\n\n// Check to see if we should try to compress a file with gzip.\nfunction shouldCompress(req) {\n  var headers = req.headers;\n\n  return headers && headers['accept-encoding'] &&\n    headers['accept-encoding']\n      .split(\",\")\n      .some(function (el) {\n        return ['*','compress', 'gzip', 'deflate'].indexOf(el) != -1;\n      })\n    ;\n}\n\n// See: https://github.com/jesusabdullah/node-ecstatic/issues/109\nfunction decodePathname(pathname) {\n  var pieces = pathname.replace(/\\\\/g,\"/\").split('/');\n\n  return pieces.map(function (piece) {\n    piece = decodeURIComponent(piece);\n\n    if (process.platform === 'win32' && /\\\\/.test(piece)) {\n      throw new Error('Invalid forward slash character');\n    }\n\n    return piece;\n  }).join('/');\n}\n\nif (!module.parent) {\n  var defaults = require('./ecstatic/defaults.json')\n  var http = require('http'),\n      opts = require('minimist')(process.argv.slice(2), {\n        alias: require('./ecstatic/aliases.json'),\n        default: defaults,\n        boolean: Object.keys(defaults).filter(function (key) {\n          return typeof defaults[key] === 'boolean'\n        })\n      }),\n      envPORT = parseInt(process.env.PORT, 10),\n      port = envPORT > 1024 && envPORT <= 65536 ? envPORT : opts.port || opts.p || 8000,\n      dir = opts.root || opts._[0] || process.cwd();\n\n  if (opts.help || opts.h) {\n    var u = console.error;\n    u('usage: ecstatic [dir] {options} --port PORT');\n    u('see https://npm.im/ecstatic for more docs');\n    return;\n  }\n\n  http.createServer(ecstatic(dir, opts))\n    .listen(port, function () {\n      console.log('ecstatic serving ' + dir + ' at http://0.0.0.0:' + port);\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-ecstatic/node_modules/ecstatic/lib/ecstatic/etag.js":"module.exports = function (stat, weakEtag) {\n  var etag = '\"' + [stat.ino, stat.size, JSON.stringify(stat.mtime)].join('-') + '\"';\n  if (weakEtag) {\n    etag = 'W/' + etag;\n  }\n  return etag;\n}\n","/home/travis/build/npmtest/node-npmtest-ecstatic/node_modules/ecstatic/lib/ecstatic/opts.js":"// This is so you can have options aliasing and defaults in one place.\n\nvar defaults = require('./defaults.json');\nvar aliases = require('./aliases.json')\n\nmodule.exports = function (opts) {\n  var autoIndex = defaults.autoIndex,\n      showDir = defaults.showDir,\n      showDotfiles = defaults.showDotfiles,\n      humanReadable = defaults.humanReadable,\n      si = defaults.si,\n      cache = defaults.cache,\n      gzip = defaults.gzip,\n      defaultExt = defaults.defaultExt,\n      handleError = defaults.handleError,\n      headers = {},\n      serverHeader = defaults.serverHeader,\n      contentType = defaults.contentType,\n      mimeTypes,\n      weakEtags = defaults.weakEtags,\n      weakCompare = defaults.weakCompare,\n      handleOptionsMethod = defaults.handleOptionsMethod;\n\n  function isDeclared(k) {\n    return typeof opts[k] !== 'undefined' && opts[k] !== null;\n  }\n\n  if (opts) {\n    aliases.autoIndex.some(function (k) {\n      if (isDeclared(k)) {\n        autoIndex = opts[k];\n        return true;\n      }\n    });\n\n    aliases.showDir.some(function (k) {\n      if (isDeclared(k)) {\n        showDir = opts[k];\n        return true;\n      }\n    });\n\n    aliases.showDotfiles.some(function (k) {\n      if (isDeclared(k)) {\n        showDotfiles = opts[k];\n        return true;\n      }\n    });\n\n    aliases.humanReadable.some(function (k) {\n      if (isDeclared(k)) {\n        humanReadable = opts[k];\n        return true;\n      }\n    });\n\n    aliases.si.some(function (k) {\n      if (isDeclared(k)) {\n        si = opts[k];\n        return true;\n      }\n    });\n\n    if (opts.defaultExt && typeof opts.defaultExt === 'string') {\n      defaultExt = opts.defaultExt;\n    }\n\n    if (typeof opts.cache !== 'undefined' && opts.cache !== null) {\n      if (typeof opts.cache === 'string') {\n        cache = opts.cache;\n      }\n      else if (typeof opts.cache === 'number') {\n        cache = 'max-age=' + opts.cache;\n      }\n      else if (typeof opts.cache === 'function') {\n        cache = opts.cache\n      }\n    }\n\n    if (typeof opts.gzip !== 'undefined' && opts.gzip !== null) {\n      gzip = opts.gzip;\n    }\n\n    aliases.handleError.some(function (k) {\n      if (isDeclared(k)) {\n        handleError = opts[k];\n        return true;\n      }\n    });\n\n    aliases.cors.forEach(function(k) {\n      if (isDeclared(k) && k) {\n        handleOptionsMethod = true;\n        headers['Access-Control-Allow-Origin'] = '*';\n        headers['Access-Control-Allow-Headers'] = 'Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since';\n      }\n    });\n\n    aliases.headers.forEach(function (k) {\n      if (!isDeclared(k)) return;\n      if (Array.isArray(opts[k])) {\n        opts[k].forEach(setHeader);\n      }\n      else if (opts[k] && typeof opts[k] === 'object') {\n        Object.keys(opts[k]).forEach(function (key) {\n          headers[key] = opts[k][key];\n        });\n      }\n      else setHeader(opts[k]);\n\n      function setHeader (str) {\n        var m = /^(.+?)\\s*:\\s*(.*)$/.exec(str)\n        if (!m) headers[str] = true\n        else headers[m[1]] = m[2]\n      }\n    });\n\n    aliases.serverHeader.some(function (k) {\n      if (isDeclared(k)) {\n        serverHeader = opts[k];\n        return true;\n      }\n    });\n\n    aliases.contentType.some(function (k) {\n      if (isDeclared(k)) {\n        contentType = opts[k];\n        return true;\n      }\n    });\n\n    aliases.mimeType.some(function (k) {\n      if (isDeclared(k)) {\n        mimeTypes = opts[k];\n        return true;\n      }\n    });\n\n    aliases.weakEtags.some(function (k) {\n      if (isDeclared(k)) {\n        weakEtags = opts[k];\n        return true;\n      }\n    });\n\n    aliases.weakCompare.some(function (k) {\n      if (isDeclared(k)) {\n        weakCompare = opts[k];\n        return true;\n      }\n    });\n\n    aliases.handleOptionsMethod.some(function (k) {\n      if (isDeclared(k)) {\n        handleOptionsMethod = handleOptionsMethod || opts[k];\n        return true;\n      }\n    });\n  }\n\n  return {\n    cache: cache,\n    autoIndex: autoIndex,\n    showDir: showDir,\n    showDotfiles: showDotfiles,\n    humanReadable: humanReadable,\n    si: si,\n    defaultExt: defaultExt,\n    baseDir: (opts && opts.baseDir) || '/',\n    gzip: gzip,\n    handleError: handleError,\n    headers: headers,\n    serverHeader: serverHeader,\n    contentType: contentType,\n    mimeTypes: mimeTypes,\n    weakEtags: weakEtags,\n    weakCompare: weakCompare,\n    handleOptionsMethod: handleOptionsMethod\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ecstatic/node_modules/ecstatic/lib/ecstatic/status-handlers.js":"var he = require('he');\n\n// not modified\nexports['304'] = function (res, next) {\n  res.statusCode = 304;\n  res.end();\n};\n\n// access denied\nexports['403'] = function (res, next) {\n  res.statusCode = 403;\n  if (typeof next === \"function\") {\n    next();\n  }\n  else {\n    if (res.writable) {\n      res.setHeader('content-type', 'text/plain');\n      res.end('ACCESS DENIED');\n    }\n  }\n};\n\n// disallowed method\nexports['405'] = function (res, next, opts) {\n  res.statusCode = 405;\n  if (typeof next === \"function\") {\n    next();\n  }\n  else {\n    res.setHeader('allow', (opts && opts.allow) || 'GET, HEAD');\n    res.end();\n  }\n};\n\n// not found\nexports['404'] = function (res, next) {\n  res.statusCode = 404;\n  if (typeof next === \"function\") {\n    next();\n  }\n  else {\n    if (res.writable) {\n      res.setHeader('content-type', 'text/plain');\n      res.end('File not found. :(');\n    }\n  }\n};\n\nexports['416'] = function (res, next) {\n  res.statusCode = 416;\n  if (typeof next === \"function\") {\n    next();\n  }\n  else {\n    if (res.writable) {\n      res.setHeader('content-type', 'text/plain');\n      res.end('Requested range not satisfiable');\n    }\n  }\n};\n\n// flagrant error\nexports['500'] = function (res, next, opts) {\n  res.statusCode = 500;\n  res.setHeader('content-type', 'text/html');\n  var error = String(opts.error.stack || opts.error || \"No specified error\"),\n      html = [\n    '<!doctype html>',\n    '<html>',\n    '  <head>',\n    '    <meta charset=\"utf-8\">',\n    '    <title>500 Internal Server Error</title>',\n    '  </head>',\n    '  <body>',\n    '    <p>',\n    '      ' + he.encode(error),\n    '    </p>',\n    '  </body>',\n    '</html>'\n  ].join('\\n') + '\\n';\n  res.end(html);\n};\n\n// bad request\nexports['400'] = function (res, next, opts) {\n  res.statusCode = 400;\n  res.setHeader('content-type', 'text/html');\n  var error = opts && opts.error ? String(opts.error) : 'Malformed request.',\n      html = [\n    '<!doctype html>',\n    '<html>',\n    '  <head>',\n    '    <meta charset=\"utf-8\">',\n    '    <title>400 Bad Request</title>',\n    '  </head>',\n    '  <body>',\n    '    <p>',\n    '      ' + he.encode(error),\n    '    </p>',\n    '  </body>',\n    '</html>'\n  ].join('\\n') + '\\n';\n  res.end(html);\n};\n","/home/travis/build/npmtest/node-npmtest-ecstatic/node_modules/ecstatic/lib/ecstatic/show-dir/index.js":"var styles = require('./styles'),\n    supportedIcons = styles.icons,\n    css = styles.css,\n    permsToString = require('./perms-to-string'),\n    sizeToString = require('./size-to-string'),\n    sortFiles = require('./sort-files'),\n    fs = require('fs'),\n    path = require('path'),\n    he = require('he'),\n    etag = require('../etag'),\n    url = require('url'),\n    status = require('../status-handlers');\n\nmodule.exports = function (opts, stat) {\n  // opts are parsed by opts.js, defaults already applied\n  var cache = opts.cache,\n      root = path.resolve(opts.root),\n      baseDir = opts.baseDir,\n      humanReadable = opts.humanReadable,\n      handleError = opts.handleError,\n      showDotfiles = opts.showDotfiles,\n      si = opts.si,\n      weakEtags = opts.weakEtags;\n\n  return function middleware (req, res, next) {\n\n    // Figure out the path for the file from the given url\n    var parsed = url.parse(req.url),\n        pathname = decodeURIComponent(parsed.pathname),\n        dir = path.normalize(\n          path.join(root,\n            path.relative(\n              path.join('/', baseDir),\n              pathname\n            )\n          )\n        );\n\n    fs.stat(dir, function (err, stat) {\n      if (err) {\n        return handleError ? status[500](res, next, { error: err }) : next();\n      }\n\n      // files are the listing of dir\n      fs.readdir(dir, function (err, files) {\n        if (err) {\n          return handleError ? status[500](res, next, { error: err }) : next();\n        }\n\n        // Optionally exclude dotfiles from directory listing.\n        if (!showDotfiles) {\n          files = files.filter(function(filename){\n            return filename.slice(0,1) !== '.';\n          });\n        }\n\n        res.setHeader('content-type', 'text/html');\n        res.setHeader('etag', etag(stat, weakEtags));\n        res.setHeader('last-modified', (new Date(stat.mtime)).toUTCString());\n        res.setHeader('cache-control', cache);\n\n        sortFiles(dir, files, function (lolwuts, dirs, files) {\n          // It's possible to get stat errors for all sorts of reasons here.\n          // Unfortunately, our two choices are to either bail completely,\n          // or just truck along as though everything's cool. In this case,\n          // I decided to just tack them on as \"??!?\" items along with dirs\n          // and files.\n          //\n          // Whatever.\n\n          // if it makes sense to, add a .. link\n          if (path.resolve(dir, '..').slice(0, root.length) == root) {\n            return fs.stat(path.join(dir, '..'), function (err, s) {\n              if (err) {\n                return handleError ? status[500](res, next, { error: err }) : next();\n              }\n              dirs.unshift([ '..', s ]);\n              render(dirs, files, lolwuts);\n            });\n          }\n          render(dirs, files, lolwuts);\n        });\n\n        function render(dirs, files, lolwuts) {\n          // each entry in the array is a [name, stat] tuple\n\n          var html = [\n            '<!doctype html>',\n            '<html>',\n            '  <head>',\n            '    <meta charset=\"utf-8\">',\n            '    <meta name=\"viewport\" content=\"width=device-width\">',\n            '    <title>Index of ' + he.encode(pathname) +'</title>',\n            '    <style type=\"text/css\">' + css + '</style>',\n            '  </head>',\n            '  <body>',\n            '<h1>Index of ' + he.encode(pathname) + '</h1>'\n          ].join('\\n') + '\\n';\n\n          html += '<table>';\n\n          var failed = false;\n          var writeRow = function (file, i) {\n            // render a row given a [name, stat] tuple\n            var isDir = file[1].isDirectory && file[1].isDirectory();\n            var href = parsed.pathname.replace(/\\/$/, '') + '/' + encodeURIComponent(file[0]);\n\n            // append trailing slash and query for dir entry\n            if (isDir) {\n              href += '/' + he.encode((parsed.search)? parsed.search:'');\n            }\n\n            var displayName = he.encode(file[0]) + ((isDir)? '/':'');\n\n            var ext = file[0].split('.').pop();\n\n            var iconClass = 'icon-' + (isDir ? '_blank' : (supportedIcons[ext] ? ext : '_page'));\n\n            // TODO: use stylessheets?\n            html += '<tr>' +\n              '<td class=\"icon-parent\"><i class=\"' + iconClass + '\"></i></td>' + \n              '<td class=\"perms\"><code>(' + permsToString(file[1]) + ')</code></td>' +\n              '<td class=\"file-size\"><code>' + sizeToString(file[1], humanReadable, si) + '</code></td>' +\n              '<td class=\"display-name\"><a href=\"' + href + '\">' + displayName + '</a></td>' +\n              '</tr>\\n';\n          };\n\n          dirs.sort(function (a, b) { return a[0].toString().localeCompare(b[0].toString()); }).forEach(writeRow);\n          files.sort(function (a, b) { return a.toString().localeCompare(b.toString()); }).forEach(writeRow);\n          lolwuts.sort(function (a, b) { return a[0].toString().localeCompare(b[0].toString()); }).forEach(writeRow);\n\n          html += '</table>\\n';\n          html += '<br><address>Node.js ' +\n            process.version +\n            '/ <a href=\"https://github.com/jfhbrook/node-ecstatic\">ecstatic</a> ' +\n            'server running @ ' +\n            he.encode(req.headers.host || '') + '</address>\\n' +\n            '</body></html>'\n          ;\n\n          if (!failed) {\n            res.writeHead(200, { \"Content-Type\": \"text/html\" });\n            res.end(html);\n          }\n        }\n      });\n    });\n  };\n};\n\n// given a file's stat, return the size of it in string\n// humanReadable: (boolean) whether to result is human readable\n// si: (boolean) whether to use si (1k = 1000), otherwise 1k = 1024\n// adopted from http://stackoverflow.com/a/14919494/665507\nfunction sizeToString(stat, humanReadable, si) {\n    if (stat.isDirectory && stat.isDirectory()) {\n      return '';\n    }\n\n    var sizeString = '';\n    var bytes = stat.size;\n    var threshold = si ? 1000 : 1024;\n\n    if (!humanReadable || bytes < threshold) {\n      return bytes + 'B';\n    }\n\n    var units = [ 'k','M','G','T','P','E','Z','Y' ];\n    var u = -1;\n    do {\n        bytes /= threshold;\n        ++u;\n    } while (bytes >= threshold);\n\n    var b = bytes.toFixed(1);\n    if (isNaN(b)) b = '??';\n\n    return b + units[u];\n}\n","/home/travis/build/npmtest/node-npmtest-ecstatic/node_modules/ecstatic/lib/ecstatic/show-dir/styles.js":"var fs = require('fs'),\n    icons = require('./icons.json'),\n    path = require('path');\n\nvar IMG_SIZE = 16;\n\nvar css = 'td.icon-parent { height: ' + IMG_SIZE + 'px; width: ' + IMG_SIZE + 'px; }\\n';\ncss += 'td.perms {}\\n';\ncss += 'td.file-size { text-align: right; padding-left: 1em; }\\n';\ncss += 'td.display-name { padding-left: 1em; }\\n';\n\nObject.keys(icons).forEach(function(key) {\n  css += 'i.icon-' + key + ' {\\n';\n  css += '  display: block; width: 100%; height: 100%; background-repeat: no-repeat;\\n';\n  css += '  background: url(\"data:image/png;base64,' + icons[key] + '\");\\n';\n  css += '}\\n\\n';\n});\n\nexports.icons = icons;\nexports.css = css;\n","/home/travis/build/npmtest/node-npmtest-ecstatic/node_modules/ecstatic/lib/ecstatic/show-dir/perms-to-string.js":"module.exports = function permsToString(stat) {\n\n  if (!stat.isDirectory || !stat.mode) {\n    return '???!!!???';\n  }\n\n  var dir = stat.isDirectory() ? 'd' : '-',\n      mode = stat.mode.toString(8);\n\n  return dir + mode.slice(-3).split('').map(function (n) {\n    return [\n      '---',\n      '--x',\n      '-w-',\n      '-wx',\n      'r--',\n      'r-x',\n      'rw-',\n      'rwx'\n    ][parseInt(n, 10)];\n  }).join('');\n};\n\n","/home/travis/build/npmtest/node-npmtest-ecstatic/node_modules/ecstatic/lib/ecstatic/show-dir/size-to-string.js":"// given a file's stat, return the size of it in string\n// humanReadable: (boolean) whether to result is human readable\n// si: (boolean) whether to use si (1k = 1000), otherwise 1k = 1024\n// adopted from http://stackoverflow.com/a/14919494/665507\nmodule.exports = function sizeToString(stat, humanReadable, si) {\n  if (stat.isDirectory && stat.isDirectory()) {\n    return '';\n  }\n\n  var sizeString = '';\n  var bytes = stat.size;\n  var threshold = si ? 1000 : 1024;\n\n  if (!humanReadable || bytes < threshold) {\n    return bytes + 'B';\n  }\n\n  var units = [ 'k','M','G','T','P','E','Z','Y' ];\n  var u = -1;\n  do {\n      bytes /= threshold;\n      ++u;\n  } while (bytes >= threshold);\n\n  var b = bytes.toFixed(1);\n  if (isNaN(b)) b = '??';\n\n  return b + units[u];\n};\n","/home/travis/build/npmtest/node-npmtest-ecstatic/node_modules/ecstatic/lib/ecstatic/show-dir/sort-files.js":"var fs = require('fs'),\n    path = require('path');\n\nmodule.exports = function sortByIsDirectory(dir, paths, cb) {\n  // take the listing file names in `dir`\n  // returns directory and file array, each entry is\n  // of the array a [name, stat] tuple\n  var pending = paths.length,\n      errs = [],\n      dirs = [],\n      files = [];\n\n  if (!pending) {\n    return cb(errs, dirs, files);\n  }\n\n  paths.forEach(function (file) {\n    fs.stat(path.join(dir, file), function (err, s) {\n      if (err) {\n        errs.push([file, err]);\n      }\n      else if (s.isDirectory()) {\n        dirs.push([file, s]);\n      }\n      else {\n        files.push([file, s]);\n      }\n\n      if (--pending === 0) {\n        cb(errs, dirs, files);\n      }\n    });\n  });\n};\n\n"}